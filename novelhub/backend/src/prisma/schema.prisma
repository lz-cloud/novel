generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id           Int       @id @default(autoincrement())
  email        String?   @unique
  username     String    @unique
  passwordHash String?
  role         Role      @default(USER)
  isDisabled   Boolean   @default(false)
  githubId     String?   @unique
  googleId     String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  novels       Novel[]
  bookmarks    Bookmark[]
  sessions     Session[]
}

model Novel {
  id          Int             @id @default(autoincrement())
  title       String
  coverUrl    String?
  description String          @default("")
  tags        String[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  authorId    Int
  author      User            @relation(fields: [authorId], references: [id])

  chapters    Chapter[]
  bookmarks   Bookmark[]
  categories  NovelCategory[]
}

model Chapter {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  isDraft    Boolean  @default(true)
  order      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  novelId    Int
  novel      Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)

  @@index([novelId, order])
}

model Category {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  slug        String          @unique
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  novels      NovelCategory[]
}

model NovelCategory {
  novelId   Int
  categoryId Int
  assignedAt DateTime @default(now())

  novel     Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  category  Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([novelId, categoryId])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  userId    Int
  novelId   Int
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  novel     Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)

  @@unique([userId, novelId], name: "userId_novelId")
}

model Session {
  id        Int      @id @default(autoincrement())
  jti       String   @unique
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
